#!/usr/bin/env python

# Copyright 2017 The Novo Nordisk Foundation Center for Biosustainability, DTU.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# try:
#     from cameo.cli import CameoApp
#
#     if __name__ == '__main__':
#         with CameoApp() as app:
#             app.run()
# except RuntimeError as e:
#     print(e)
#     exit(1)

__all__ = ['main']

from six.moves import input

VALID_OUTPUT_FORMATS = ["xlsx", "csv", "tsv"]
OUTPUT_WRITER = {
    "xlsx": lambda df, path: df.to_excel(path),
    "csv": lambda df, path: df.to_csv(path, sep=","),
    "tsv": lambda df, path: df.to_csv(path, sep="\t"),
}
OUTPUT_FORMATS_EXPLANATION = {
    "xlsx": "Excel file",
    "csv": "Comma separated values",
    "tsv": "Tab separated values"
}

import click

@click.group()
@click.option('--verbose', is_flag=True)
def main(verbose):
    """Cameo command line interface"""

@main.command()
@click.option('--host', default=None, help='Number of greetings.')
@click.option('--output', default='-', help='Number of greetings.')
@click.option('--format', default='xlsx', prompt='Format[xlsx]:', help='The output format')
@click.option('--cores', default=1, help='Number of CPU cores to use.')
@click.option('--aerobic', default=True, help='Anaerobic condicitons.')
@click.argument('product')
def design(product, host, output, format, cores, aerobic):
    """Search for products in our internal database"""
    from cameo.api.designer import design
    from cameo.api.hosts import hosts
    from cameo.parallel import MultiprocessingView, SequentialView

    if host is None:
        _hosts = ['ecoli', 'yeast']
    else:
        _hosts = host

    _hosts = [getattr(hosts, host) for host in _hosts]

    if cores > 1:
        view = MultiprocessingView(processes=self.app.pargs.cores)
    elif cores == 1:
        view = SequentialView()
    else:
        raise ValueError('{} is not a proper number of CPU cores.')
        sys.exit(1)

    design.debug = True
    try:
        results = design(product=product, hosts=_hosts,
                         view=view, aerobic=aerobic)

        results['heterologous_pathway'] = results.heterologous_pathway.apply(str)
        results['manipulations'] = results.manipulations.apply(str)

        OUTPUT_WRITER[format](results, output)
    except KeyError as e:
        print(e)
        exit(1)


@cli.command()
@click.argument('product')
def search(product):
    """Fuzzy search for products in product database"""
    from cameo.api.products import products
    result = products.search(product)
    if len(result) > 0:
        print(result[['name', 'formula', 'mass', 'search_rank']])
    else:
        print("No results found")

if __name__ == '__main__':
    cli()